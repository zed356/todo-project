import { useState } from "react";
import { RootState } from "store/store";
import { useAppSelector } from "./hooks";

interface SendRequest {
  url: string;
  method: "GET" | "POST" | "PATCH" | "DELETE";
  body: any; // to be filled in
  headers?: any;
  reqAuth: boolean;
}

type HttpResult = {
  status: number;
  data?: any;
};

const useHttp = () => {
  const [isLoading, setIsloading] = useState(false);
  const [result, setResult] = useState<HttpResult>();
  const authHeader = useAppSelector((state: RootState) => state.auth.authHeader);

  const sendRequest = async (options: SendRequest) => {
    setIsloading(true);
    const { url, method, body, reqAuth } = options;

    // Default header
    let headers = {
      "Content-Type": "application/json",
    };
    // Sets headers if they are provided
    if (options?.headers) {
      headers = options.headers;
    }
    try {
      // Adds an authorisation token if required and one exists.
      if (reqAuth) {
        if (authHeader) {
          headers = { ...headers, ...authHeader };
        } else {
          throw Error("No authorisation token present");
        }
      }

      // Sends http request
      const res = await fetch(url, {
        method,
        body,
        headers,
      });

      // If status code 20* then returns data, otherwise unsuccessful status code is attached
      // response generated by calling component.
      if (res.status === 200 || res.status === 201) {
        const data = await res.json();
        setResult({ status: res.status, data });
      } else {
        setResult({ status: res.status });
      }
    } catch (error: any) {
      setResult(error.message);
    }
    setIsloading(false);
  };

  return [isLoading, sendRequest, result];
};

export default useHttp;
